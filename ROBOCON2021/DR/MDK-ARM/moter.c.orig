#include "moter.h"
#include "bsp_can.h"
#include "math.h"
#include "stdio.h"
#include "bsp_imu.h"
#define  fabs(a)   a>0? a:-a
const int offsetm1 = 1;//代表顺时针
const int offsetm2 = 1;//代表逆时针
const int offsetm3 = 1;
const int offsetm4 = -1;
float speed = 0.2;
#define R  0.1f
short ABS_MAX = 20000;//数度最大值
#define circle  0.10688f*3.1415926f//每个轮子的周长
#define Reduction  8192 * 19.2f * 3                //减速比
const int  saft_angle = 859441;
u16 moter1[4] = {0};
s16 pos_out[4] = {0};
DUOLUN D_Wheel[4];
speed_wheel S_speed[4];
static  double PI = 3.1415926f;
double LENGTH = 0.48, WIDTH = 0.48;
double Ri = 0.0;
kinematics_st kinematics;
extern float tuolun_angle[4] ;
void Kinematics_Init(void)
{
    kinematics.max_rpm_ 						= 330; 				// 空载转速330rpm
    kinematics.wheels_x_distance_		= 0.8;
    kinematics.wheels_y_distance_		= 0.8;
    kinematics.pwm_res_							= 500;
    kinematics.wheel_circumference_	= 0.10688f * 3.1415926f; //轮子周长
    kinematics.total_wheels_				= 4;
}
void set_dir(float jiaoduM1, float jiaoduM2, float jiaoduM3, float jiaoduM4)//改变角度的期望
{
    kinematics.exp_vel[0].jiado = jiaoduM1;
    kinematics.exp_vel[1].jiado = jiaoduM2;
    kinematics.exp_vel[2].jiado = jiaoduM3;
    kinematics.exp_vel[3].jiado = jiaoduM4;

}

void Calculate(double x, double y, double z, double angle)
{
    if(angle != -999.0)
    {
        angle = angle * PI / 180;
        double temp = x * cos(angle) + y * sin(angle);
        y = -x * sin(angle) + y * cos(angle);
        x = temp;
    }
    Ri = sqrt((LENGTH * LENGTH) + (WIDTH * WIDTH));
    double A = y - z * (LENGTH / Ri);
    double B = y + z * (LENGTH / Ri);
    double C = x - z * (WIDTH / Ri);
    double D = x + z * (WIDTH / Ri);

    double wSpeed1 = sqrt(B * B + C * C);
    double wAngle1 = atan2(B, C) * 180 / PI;

    double wSpeed2 = sqrt(B * B + D * D);
    double wAngle2 = atan2(B, D) * 180 / PI;

    double wSpeed3 = sqrt(A * A + D * D);
    double wAngle3 = atan2(A, D) * 180 / PI;

    double wSpeed4 = sqrt(A * A + C * C);
    double wAngle4 = atan2(A, C) * 180 / PI;
    if(z == 0 && y == 0)
    {
        if(__fabs(wAngle1) >= 180)
        {
            if(wAngle1 > 0)
                wAngle1 = wAngle1 - 180;
            else
                wAngle1 = 180 + wAngle1;
            kinematics.exp_vel[0].speed = -wSpeed1;
        }
        else
        {
            kinematics.exp_vel[0].speed = wSpeed1;
        }
        if(__fabs(wAngle2) >= 180)
        {
            if(wAngle2 > 0)
                wAngle2 = wAngle2 - 180;
            else
                wAngle2 = 180 + wAngle2;
            kinematics.exp_vel[1].speed = -wSpeed2;
        }
        else
        {
            kinematics.exp_vel[1].speed = wSpeed2;
        }
        if(__fabs(wAngle3) >= 180)
        {
            if(wAngle3 > 0)
                wAngle3 = wAngle3 - 180;
            else
                wAngle3 = 180 + wAngle3;
            kinematics.exp_vel[3].speed = -wSpeed3;
        }
        else
        {
            kinematics.exp_vel[3].speed = wSpeed3;
        }
        if(__fabs(wAngle4) >= 180)
        {
            if(wAngle4 > 0)
                wAngle4 = wAngle4 - 180;
            else
                wAngle4 = 180 + wAngle4;
            kinematics.exp_vel[2].speed = -wSpeed4;
        }
        else
        {
            kinematics.exp_vel[2].speed = wSpeed4;
        }
    }

    else
    {
        kinematics.exp_vel[0].speed = wSpeed1;
        kinematics.exp_vel[1].speed = wSpeed2;
        kinematics.exp_vel[2].speed = wSpeed4;
        kinematics.exp_vel[3].speed = wSpeed3;
    }
    kinematics.exp_vel[0].jiado = wAngle2;
    kinematics.exp_vel[1].jiado = wAngle1;
    kinematics.exp_vel[2].jiado = wAngle4;
    kinematics.exp_vel[3].jiado = wAngle3;

		
//
//
//
//	kinematics.exp_vel[1].speed=wSpeed2;
//	kinematics.exp_vel[2].speed=wSpeed4;
//	kinematics.exp_vel[3].speed=wSpeed3;
    //normalizes speeds so they're within the ranges of -1 to 1
    // double maxSpeed = wSpeed1;
    // if(wSpeed2 > maxSpeed) maxSpeed = wSpeed2;
    // if(wSpeed3 > maxSpeed) maxSpeed = wSpeed3;
    // if(wSpeed4 > maxSpeed) maxSpeed = wSpeed4;

    // if(maxSpeed > 1)
    // {
    // 	wSpeed1/=maxSpeed;
    // 	wSpeed2/=maxSpeed;
    // 	wSpeed3/=maxSpeed;
    // 	wSpeed4/=maxSpeed;
    // }
    //Normalizes angles so they are within -1 to 1
}
void set_speed(float speedM1, float speedM2, float speedM3, float speedM4)
{
    kinematics.exp_vel[0].speed = speedM1;
    kinematics.exp_vel[1].speed = speedM2;
    kinematics.exp_vel[2].speed = speedM3;
    kinematics.exp_vel[3].speed = speedM4;

}
void limit_speedd(float *a, float ABS_MAX)
{
    if(*a > ABS_MAX )
        *a = ABS_MAX;
    if(*a < -ABS_MAX)
        *a = -ABS_MAX;
}

void dir_safe()
{
    for(int i = 4; i < 8; i++)
    {
        if(fabs(moto_chassis[i].total_angle - saft_angle) > 500)
        {
            D_Wheel[i - 4].pid_shudu.pos_out = 0; //超过360为零
        }
    }
}
void setSingleMotor(uint8_t _mNum, float _mspeed)
{
    limit_speedd(&_mspeed, ABS_MAX);
    if (_mNum == M1) { // MOTOR 1
        pid_calc(&S_speed[0].pid_shudu, moto_chassis[0].speed_rpm, offsetm1 * _mspeed);
    } else if (_mNum == M2) { // MOTOR 2
        pid_calc(&S_speed[1].pid_shudu, moto_chassis[1].speed_rpm, offsetm2 * _mspeed);

    } else if (_mNum == M3) { // MOTOR 3
        pid_calc(&S_speed[2].pid_shudu,  moto_chassis[2].speed_rpm, offsetm3 * _mspeed);

    } else if (_mNum == M4) { // MOTOR 4
        pid_calc(&S_speed[3].pid_shudu, moto_chassis[3].speed_rpm, offsetm4 * _mspeed);
    }
    set_moto_current(&hcan1, S_speed[0].pid_shudu.pos_out, S_speed[1].pid_shudu.pos_out,
                     S_speed[2].pid_shudu.pos_out, S_speed[3].pid_shudu.pos_out);
}
void setMotor(float speedM1, float speedM2, float speedM3, float speedM4) //每个舵轮的速度 正speed代表前进 负代表后退 依次为左前 右前 右后 左后轮
{



    setSingleMotor(M1, -speedM1 * 60 * 19 / 0.1016f);
    setSingleMotor(M2, speedM2 * 60 * 19 / 0.1016f);
    setSingleMotor(M3, speedM3 * 60 * 19 / 0.1016f);
    setSingleMotor(M4, speedM4 * 60 * 19 / 0.1016f);
}

void set_v(float v_x, float v_y, float z) //m/s
{

//	moter1[0]=v_x-v_y+z;
//
//	setMotor(moter1[0],mott);
//
}
void setMotor_dir(float jiaoduM1, float jiaoduM2, float jiaoduM3, float jiaoduM4) //每个舵轮的方向 正speed代表前进 负代表后退
{
    setSingleMotor_jiaodu(&D_Wheel[0], jiaoduM1);
    setSingleMotor_jiaodu(&D_Wheel[1], jiaoduM2);
    setSingleMotor_jiaodu(&D_Wheel[2], jiaoduM3);
    setSingleMotor_jiaodu(&D_Wheel[3], jiaoduM4);
    dir_safe();
    set_moto2_current(&hcan1, D_Wheel[0].pid_shudu.pos_out,
                      D_Wheel[1].pid_shudu.pos_out,
                      D_Wheel[2].pid_shudu.pos_out,
                      D_Wheel[3].pid_shudu.pos_out);
}
void duo_lun_Dir_init()
{
    D_Wheel[0].dir = 1;
    D_Wheel[1].dir = 1;
    D_Wheel[2].dir = 1;
    D_Wheel[3].dir = 1;
    D_Wheel[0].id = 4;
    D_Wheel[1].id = 5;
    D_Wheel[2].id = 6;
    D_Wheel[3].id = 7;  	                                               // P      I        D
    PID_struct_init(&D_Wheel[0].pid_weizhi, POSITION_PID, 20000, 20000, 201.0f,	0.01f, 0.233f);
    PID_struct_init(&D_Wheel[1].pid_weizhi, POSITION_PID, 20000, 20000, 201.0f,	0.010f, 0.233f);
    PID_struct_init(&D_Wheel[2].pid_weizhi, POSITION_PID, 20000, 20000, 201.0f,	0.010f, 0.233f);
    PID_struct_init(&D_Wheel[3].pid_weizhi, POSITION_PID, 20000, 20000, 201.0f,	0.010f, 0.233f);
    PID_struct_init(&D_Wheel[0].pid_shudu, POSITION_PID, 20000, 20000,  8.7f,	0.00f, 0.02f);
    PID_struct_init(&D_Wheel[1].pid_shudu, POSITION_PID, 20000, 20000,  8.7f,	0.00f, 0.02f);
    PID_struct_init(&D_Wheel[2].pid_shudu, POSITION_PID, 20000, 20000,  8.7f,	0.00f, 0.02f);// 5.7f,  0.01f, 0.02f
    PID_struct_init(&D_Wheel[3].pid_shudu, POSITION_PID, 20000, 20000,  8.7f,	0.00f, 0.02f);
    D_Wheel[0].offset = 150.5;//设置零点
    D_Wheel[1].offset = 350;
    D_Wheel[2].offset = 281;
    D_Wheel[3].offset = 269.35;
    D_Wheel[0].except = 0;
    D_Wheel[1].except = 0;
    D_Wheel[2].except = 0;
    D_Wheel[3].except = 0;

    D_Wheel[0].jiaodu = 0;
    D_Wheel[1].jiaodu = 0;
    D_Wheel[2].jiaodu = 0;
    D_Wheel[3].jiaodu = 0;
}

void duo_lun_speed_init()
{
    S_speed[0].id = 0;
    S_speed[1].id = 1;
    S_speed[2].id = 2;
    S_speed[3].id = 3;
    // P      I        D
    PID_struct_init(&S_speed[0].pid_weizhi, POSITION_PID, 20000, 20000,
                    1.52f,	0.00f, 0.3f);
    PID_struct_init(&S_speed[1].pid_weizhi, POSITION_PID, 20000, 20000,
                    1.52f,	0.00f, 0.3f);
    PID_struct_init(&S_speed[2].pid_weizhi, POSITION_PID, 20000, 20000,
                    1.52f,	0.00f, 0.3f);
    PID_struct_init(&S_speed[3].pid_weizhi, POSITION_PID, 20000, 20000,
                    1.52f,	0.00f, 0.3f);

    PID_struct_init(&S_speed[0].pid_shudu, POSITION_PID, 20000, 20000,
                    12.0f,	0.00001f, 0.3f);
    PID_struct_init(&S_speed[1].pid_shudu, POSITION_PID, 20000, 20000,
                    12.0f,	  0.00001f, 0.3f);
    PID_struct_init(&S_speed[2].pid_shudu, POSITION_PID, 20000, 20000,
                    12.0f,	0.00001f, 0.3f);
    PID_struct_init(&S_speed[3].pid_shudu, POSITION_PID, 20000, 20000,
                    12.0f,	0.00001f, 0.3f);
    S_speed[0].rpm = 0;
    S_speed[1].rpm = 0;
    S_speed[2].rpm = 0;
    S_speed[3].rpm = 0;
    S_speed[0].speed = 0;
    S_speed[1].speed = 0;
    S_speed[2].speed = 0;
    S_speed[3].speed = 0;

}
void setSingleMotor_jiaodu(DUOLUN *p, float angle)//控制转向 Id 为 5 6 7 8
{
    float mesure = 0;
    u8 i = 0;
    i = p - &D_Wheel[0];
    angle = angle + D_Wheel[i].offset;
    if(angle < 0)
        angle += 360;
    mesure = tuolun_angle[i];
    if(mesure - angle > 180) //最多转180度
    {
        mesure = mesure - 360;
    }
    else if(angle - mesure > 180)
        angle = angle - 360;
    pid_calc(&p->pid_weizhi, mesure, angle); //位置环
    pid_calc(&p->pid_shudu, moto_chassis[i + 4].speed_rpm, p->pid_weizhi.pos_out * speed); //速度环
    pos_out[i] = p->pid_shudu.pos_out;
}
void set_poit()
{


}
void setSingleMotor_juli(uint8_t _mNum, float angle) //设置单个速度环距离走多少
{
//    for(int i = 0; i < 4; i++)
//    {
//			if(fabs(angle-moto_chassis[i].total_angle)<=10)
//			{
//				moto_chassis[i].total_angle=0;//清零
//			}
//    }
    if (_mNum == M1) { // MOTOR 1
        pid_calc(&S_speed[0].pid_weizhi, moto_chassis[0].total_angle, angle);
        pid_calc(&S_speed[0].pid_shudu, moto_chassis[0].speed_rpm, S_speed[0].pid_weizhi.pos_out * speed);
    } else if (_mNum == M2) { // MOTOR 2
        pid_calc(&S_speed[1].pid_weizhi, moto_chassis[1].total_angle, angle);
        pid_calc(&S_speed[1].pid_shudu, moto_chassis[1].speed_rpm, S_speed[1].pid_weizhi.pos_out * speed);

    } else if (_mNum == M3) { // MOTOR 3
        pid_calc(&S_speed[2].pid_weizhi, moto_chassis[2].total_angle, angle);
        pid_calc(&S_speed[2].pid_shudu, moto_chassis[2].speed_rpm, S_speed[2].pid_weizhi.pos_out * speed);

    } else if (_mNum == M4) { // MOTOR 4
        pid_calc(&S_speed[3].pid_weizhi, moto_chassis[3].total_angle, angle);
        pid_calc(&S_speed[3].pid_shudu, moto_chassis[3].speed_rpm, S_speed[3].pid_weizhi.pos_out * speed);
    }
    set_moto_current(&hcan1, S_speed[0].pid_shudu.pos_out, S_speed[1].pid_shudu.pos_out,
                     S_speed[2].pid_shudu.pos_out, S_speed[3].pid_shudu.pos_out);
}


void setallMotor_juli(float speedM1, float speedM2, float speedM3, float speedM4)//设置所以速度轮走的距离 单位是m
{

    speedM1 = (speedM1 / circle) * Reduction / 10;
    speedM2 = (speedM2 / circle) * Reduction / 10;
    speedM3 = (speedM3 / circle) * Reduction / 10;
    speedM4 = (speedM4 / circle) * Reduction / 10;
    //printf("%f\r\n",speedM1);
    setSingleMotor_juli(M1, -speedM1);
    setSingleMotor_juli(M2, speedM2);
    setSingleMotor_juli(M3, speedM3);
    setSingleMotor_juli(M4, -speedM4);
}
void  Car_to_point(float vec_x, float vec_y, float wz)
{





}
void set_jiaodu(float jiaodu)
{
    if(fabs(imu.yaw - jiaodu) < 0.5f)
        setMotor_dir(0, 0, 0, 0);
    else if(fabs(imu.yaw - jiaodu) > 0.5f)
    {
        setMotor_dir(45, 45, 45, 45);
        pid_sp_calc(&yaw_pos, imu.yaw, jiaodu, mpu_data.gz);
        setMotor(yaw_pos.pos_out, yaw_pos.pos_out, yaw_pos.pos_out, yaw_pos.pos_out);
    }

}
