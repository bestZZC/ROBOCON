/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * File Name          : freertos.c
  * Description        : Code for freertos applications
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "pid.h"
#include "bsp_can.h"
#include "mytype.h"
#include "tim.h"
#include "stdio.h"
#include "moter.h"
#include "main.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
#include "bsp_imu.h"
#include "bsp_uart.h"
#include "control.h"
char buf[300];
extern UART_HandleTypeDef huart6;
extern ADC_HandleTypeDef hadc1;
extern rc_info_t rc;
uint32_t ADC_Value[100];
uint32_t ad1, ad2, ad3, ad4;
float tuolun_angle[4] = {0}, pre_angle[4] = {0};
#define  fab(x)    x>0?x:-x
u8 dir = 1;
float orignal_yaw = 0.0f;
#define COUNTOF(__BUFFER__)   (sizeof(__BUFFER__) / sizeof(*(__BUFFER__)))
extern volatile uint8_t rx_len, rx_len2, rx_len3;                      //接收一帧数据的长度
extern volatile uint8_t recv_end_flag, recv_end_flag2, recv_end_flag3; //一帧数据接收完成标志
extern uint8_t rx_buffer[100], rx_buffer2[100], rx_buffer3[100];       //接收数据缓存数组
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */
osThreadId defaultTaskHandle;
osThreadId myTask02Handle;
osThreadId myTask03Handle;

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */
void set_total_angle(moto_measure_t *p, moto_measure_t *p1, int angle, u8 dir, u16 speed);//
void weizhihuan(moto_measure_t *p, float angle);
void weizhihuan_duolun(moto_measure_t *p, float mesure, float angle);
/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void const * argument);
void StartTask02(void const * argument);
void StartTask03(void const * argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
    *ppxIdleTaskStackBuffer = &xIdleStack[0];
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
    /* place for user code */
}
/* USER CODE END GET_IDLE_TASK_MEMORY */

/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* USER CODE BEGIN RTOS_MUTEX */
    /* add mutexes, ... */
    /* USER CODE END RTOS_MUTEX */

    /* USER CODE BEGIN RTOS_SEMAPHORES */
    /* add semaphores, ... */
    /* USER CODE END RTOS_SEMAPHORES */

    /* USER CODE BEGIN RTOS_TIMERS */
    /* start timers, add new ones, ... */
    /* USER CODE END RTOS_TIMERS */

    /* USER CODE BEGIN RTOS_QUEUES */
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of defaultTask */
    osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
    defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);

    /* definition and creation of myTask02 */
    osThreadDef(myTask02, StartTask02, osPriorityBelowNormal, 0, 128);
    myTask02Handle = osThreadCreate(osThread(myTask02), NULL);

    /* definition and creation of myTask03 */
    osThreadDef(myTask03, StartTask03, osPriorityBelowNormal, 0, 128);
    myTask03Handle = osThreadCreate(osThread(myTask03), NULL);

    /* USER CODE BEGIN RTOS_THREADS */

    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
  * @brief  Function implementing the defaultTask thread.
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
    /* USER CODE BEGIN StartDefaultTask */
    my_can_filter_init_recv_all(&hcan1);
    my_can_filter_init_recv_all(&hcan2);
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING );	// Enable interrupts
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING );	// Enable interrupts

    duo_lun_speed_init();
    duo_lun_Dir_init();
    HAL_TIM_Base_Start_IT(&htim7);
	  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
  HAL_UART_Receive_DMA(&huart6, rx_buffer, 100);
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
  HAL_UART_Receive_DMA(&huart2, rx_buffer2, 100);
    PID_struct_init(&yaw_pos, POSITION_PID, 20000, 20000, 0.72f,	0.00f, 0.3f);
    PID_struct_init(&yaw_pos, POSITION_PID, 5000, 1000, 0.72f, 0.00f, 0.3f);        //转向环
    PID_struct_init(&PID_Position_X, POSITION_PID, 5000, 1000, 0.72f, 0.00f, 0.3f); //x方向
    PID_struct_init(&PID_Position_X, POSITION_PID, 5000, 1000, 0.72f, 0.00f, 0.3f); //y方向
    Calculate(0, 0, 0, -999); //每个转向环归为;
    for(int i = 0; i < 8; i++)
        moto_chassis[i].total_angle = 0; //清零
    /* Infinite loop */
    /* Infinite loop */
    for(;;)
    {
//        sprintf(buf, "CH1: %4d  CH2: %4d  CH3: %4d  CH4: %4d  SW1: %1d  SW2: %1d \r\n", rc.ch1, rc.ch2, rc.ch3, rc.ch4, rc.sw1, rc.sw2);
//        HAL_UART_Transmit(&huart6, (uint8_t *)buf, (COUNTOF(buf) - 1), 0xffff);
         Calculate(rc.ch4 / 250.0f, rc.ch3 / 400.0f, rc.ch2 / 600.0f, -999);
        osDelay(5);
    }
    /* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_StartTask02 */
/**
* @brief Function implementing the myTask02 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
    /* USER CODE BEGIN StartTask02 */
    u8 i;
    float yingzi = 0;
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&ADC_Value, 100);
    /* Infinite loop */
    for(;;)
    {

        for(i = 0, ad1 = ad2 = ad3 = ad4 = 0; i < 100;) {
            ad1 += ADC_Value[i++] ;
            ad2 += ADC_Value[i++] ;
            ad3 += ADC_Value[i++] ;
            ad4 += ADC_Value[i++] ;
        }
        ad1 /= 25;
        ad2 /= 25;
        ad3 /= 25;
        ad4 /= 25;
        pre_angle[0] = (ad1 * 3.3f * 110.0917f) / (4096 * (3.26 / 3.3));
        pre_angle[1] = (ad2 * 3.3f * 110.0917f) / (4096 * (3.26 / 3.3));
        pre_angle[2] = (ad3 * 3.3f * 110.0917f) / (4096 * (3.26 / 3.3));
        pre_angle[3] = (ad4 * 3.3f * 110.0917f) / (4096 * (3.26 / 3.3));
        tuolun_angle[0] = yingzi * tuolun_angle[0] + (1 - yingzi) * pre_angle[0]; //低通滤波
        tuolun_angle[1] = yingzi * tuolun_angle[1] + (1 - yingzi) * pre_angle[1];
        tuolun_angle[2] = yingzi * tuolun_angle[2] + (1 - yingzi) * pre_angle[2];
        tuolun_angle[3] = yingzi * tuolun_angle[3] + (1 - yingzi) * pre_angle[3];
        //printf("AD1_value=%1.3f AD2_value=%1.3f AD3_value=%1.3f AD4_value=%1.3f\r\n ", tuolun_angle[0], tuolun_angle[1],tuolun_angle[2],tuolun_angle[3]);
        osDelay(1);
    }
    /* USER CODE END StartTask02 */
}

/* USER CODE BEGIN Header_StartTask03 */
/**
* @brief Function implementing the myTask03 thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
    /* USER CODE BEGIN StartTask03 */
    /* Infinite loop */
    for(;;)
    {
        mpu_get_data();
        imu_ahrs_update();
        imu_attitude_update();
        osDelay(5);
    }
    /* USER CODE END StartTask03 */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */



/* USER CODE END Application */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
